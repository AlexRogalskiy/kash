options {
    STATIC = false;
    DEBUG_PARSER = false;
}

PARSER_BEGIN(KashWordParser)
package com.beust.kash.word;

import java.util.List;
import java.util.ArrayList;

public class KashWordParser {
}
PARSER_END(KashWordParser)

TOKEN: {
    // Important: $, {, and } should not be part of WORD
    <WORD: (["a"-"z", "A"-"Z", "0"-"9", "*", "?", "[", "]", "/", "_", "-", "~", ".", "@"]) +>
    | <SPACES: ([" ", "\t"]) +>
}


List<WordFragment> ParsedWord():
{
    Token w;
    List<WordFragment> result = new ArrayList<WordFragment>();
}
{
    (
        w = <WORD> { result.add(new WordFragment(w.image, true)); }
        | w = <SPACES> { result.add(new WordFragment(w.image, true)); }
        | "$" w = <WORD> { result.add(new WordFragment(w.image, false)); }
        | "${" w = <WORD> "}" { result.add(new WordFragment(w.image, false)); }
    )+
    {
        return result;
    }
}

