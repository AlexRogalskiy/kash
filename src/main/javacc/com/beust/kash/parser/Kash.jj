options {
    STATIC = false;
    DEBUG_PARSER = true;
}

PARSER_BEGIN(KashParser)

package com.beust.kash.parser;

import java.util.List;
import java.util.ArrayList;

public class KashParser {
    public static boolean eq(Object a, Object b) {
        return (a == null && b == null) || (a != null && a.equals(b));
    }

    public static <T> String joinToString(List<T> list) {
        StringBuilder result = new StringBuilder();
        boolean first = true;
        for (T e: list) {
            if (! first) result.append(",");
            else first = false;
            result.append(e);
        }
        return result.toString();
    }
}

PARSER_END(KashParser)

SKIP:  { " " | "\t" | "\n" | "\r" }
TOKEN: {
    ";" | "&&" | "||"
    | <WORD: (["-", "~", ".", "a"-"z", "A"-"Z", "0"-"9", "*", "?", "[", "]", "/", "$"]) +>
}

CompoundList CompoundList():
{
    SimpleCommand c = null;
    List<SimpleCommand> commands = new ArrayList<SimpleCommand>();
}
{
    (c = SimpleCommand() { commands.add(c); }
        ("&&" c = SimpleCommand() { commands.add(new SimpleCommand(c.content, c.input, c.output, "&&")); })*
        ("||" c = SimpleCommand() { commands.add(new SimpleCommand(c.content, c.input, c.output, "||")); })*
        (";" c = SimpleCommand() { commands.add(new SimpleCommand(c.content, c.input, c.output, ";")); })*
    )
    {
        return new CompoundList(commands);
    }
}

SimpleList SimpleList():
{
    List<PipeLineCommand> cs;
    boolean ampersand = false;
    SimpleList result;
}
{
    (cs = SimpleList1()) ("&" { ampersand = true; })?
    {
        return new SimpleList(cs, ampersand);
    }
    <EOF>
}

List<PipeLineCommand> SimpleList1():
{
    PipeLineCommand c;
    List<PipeLineCommand> cs;
    List<PipeLineCommand> result = new ArrayList<PipeLineCommand>();
}
{
    c = PipeLineCommand() { result.add(c); }
        ("&&" cs = SimpleList1() {
            for (PipeLineCommand pc: cs) {
                result.add(new PipeLineCommand(pc.content, "&&"));
            }
        })*
        ("||" cs = SimpleList1() {
            for (PipeLineCommand pc: cs) {
                result.add(new PipeLineCommand(pc.content, "||"));
            }
        })*
        (";" cs = SimpleList1() {
            for (PipeLineCommand pc: cs) {
                result.add(new PipeLineCommand(pc.content, ";"));
            }
        })*

    {
        return result;
    }

}


SimpleCommand SimpleCommand():
{
    RedirectionNode redir = null;
    String input = null;
    String output = null;
    Token w;
    List<String> words = new ArrayList<String>();
    List<SimpleCmd> simpleCmds = new ArrayList<SimpleCmd>();
}
{
    (
        (
            (w = <WORD> { words.add(w.image); } )+ {
                simpleCmds.add(new SimpleCmd(new ArrayList(words))); words.clear();
            }
            |
            "\"" (w = <WORD> { words.add(w.image); } )+  "\""  {
                simpleCmds.add(new SimpleCmd(new ArrayList(words), "\"")); words.clear();
            }
            |
            "`" (w = <WORD> { words.add(w.image); } )+  "`"  {
                simpleCmds.add(new SimpleCmd(new ArrayList(words), "`")); words.clear();
            }
        )+

        (redir = Redirection() {
            switch(redir.symbol) {
                case(">"): output = redir.destination; break;
                case("<"): input= redir.destination; break;
            }
        })*
    )
    {
    return new SimpleCommand(simpleCmds, input, output);
}
}

Command Command():
{
    SimpleCommand sc;
    SubShell ss;
    Command result;
}
{
    (
    ( sc = SimpleCommand() { result = new Command(sc, null); })
    |
    ss = SubShell() { result = new Command(null, ss); }
    )
    {
    return result;
    }
}

RedirectionNode Redirection():
{
    Token c = null;
    Token t = null;
}
{
    (c = ">" t = <WORD> | c = "<" t = <WORD>)
    {
        return new RedirectionNode(c.image, t.image);
    }
}

SubShell SubShell():
{
    CompoundList result = null;
}
{
    "(" result = CompoundList() ")"
    {
        return new SubShell(result);
    }
}

PipeLineCommand PipeLineCommand():
{
    Command c;
    List<Command> commands = new ArrayList<Command>();
}
{
    c = Command() { commands.add(c); }
        ("|" c = Command() { commands.add(c); })*
    {
        return new PipeLineCommand(commands, null);
    }

}
