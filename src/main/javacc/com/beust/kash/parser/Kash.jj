    options {
    STATIC = false ;
    DEBUG_PARSER = false;
}

PARSER_BEGIN(KashParser)

package com.beust.kash.parser;

import java.util.List;
import java.util.ArrayList;

public class KashParser {
    public static class RedirectionNode {
        public final String symbol;
        public final String destination;
        RedirectionNode(String symbol, String destination) { this.symbol = symbol; this.destination = destination; }
    }

    public static class Command<T> {
        public final T content;
        public Command(T content) { this.content = content; }
    }

    public static class SimpleCommand {
        public final List<String> words;
        public final String input;
        public final String output;
        public SimpleCommand(List<String> words, String input, String output) {
            this.words = words; this.input = input; this.output = output;
        }
    }

    public static class CompoundList extends Command<List<SimpleCommand>> {
        public CompoundList(List<SimpleCommand> content) { super(content); }
    }

    public static class PipeCommand extends Command<List<List<String>>> {
        public PipeCommand(List<List<String>> content) { super(content); }
    }


    public static class SubShell {
        public final KashParser.CompoundList command;
        public SubShell(KashParser.CompoundList command) {
            this.command = command;
        }
    }


    public static class SingleCommand extends Command<List<String>> {
        public SingleCommand(List<String> content, String input, String output) { super(content); }
    }

    public static class AndAndCommand extends Command<List<List<String>>> {
        public AndAndCommand(List<List<String>> content) { super(content); }
    }
}

PARSER_END(KashParser)

SKIP:  { " " | "\t" | "\n" | "\r"                    }
TOKEN: {
    "(" | ")" | <GT: ">"> | <LT: "<"> | <ANDAND: "&&"> | <PIPE: "|"> | <NUM: (["0"-"9"])+>
    | <WORD: (["-", ".", "a"-"z", "A"-"Z"]) +>
     }

void Command():
{}
{
    SimpleCommand() | SubShell()
    <EOF>
}

KashParser.SimpleCommand SimpleCommand():
{
    RedirectionNode redir = null;
    Token w = null;
    String input = null;
    String output = null;
    List<String> words = new ArrayList<String>();
}
{
    ((w = <WORD> { words.add(w.image); })+)
    (redir = Redirection() {
        switch(redir.symbol) {
            case(">"): output = redir.destination; break;
            case("<"): input= redir.destination; break;
        }
     }
    )*
    {
        return new KashParser.SimpleCommand(words, input, output);
    }
}

RedirectionNode Redirection():
{
    Token c = null;
    Token t = null;
}
{
    (c = ">" t = <WORD> | c = "<" t = <WORD>)
    {
        System.out.println("Redirection: " + t.image);
        return new KashParser.RedirectionNode(c.image, t.image);
    }
}

KashParser.SubShell SubShell():
{
    CompoundList result = null;
}
{
    "(" result = CompoundList() ")"
    {
        return new SubShell(result);
    }
}

CompoundList CompoundList():
{
    KashParser.SimpleCommand c = null;
    List<SimpleCommand> commands = new ArrayList<SimpleCommand>();
}
{
    c = SimpleCommand() { commands.add(c); }
        ("|" c = SimpleCommand() { commands.add(c); })*

    {
        return new KashParser.CompoundList(commands);
    }
}

Command Goal3():
{
    Token word;
    Token output = null;
    Token input = null;
    Token err = null;
    List<String> singleCommandWords = new ArrayList<String>();
    List<String> words = new ArrayList<String>();

    boolean isPipe = false;
    boolean isAndAnd = false;
    List<List<String>> allWords = new ArrayList<List<String>>();
}
{
    (
        word = <WORD> (<GT> output = <WORD>)* (<LT> input = <WORD>)* (<PIPE> { isPipe = true; })?
        {
            words.add(word.image);
            if (isPipe) {
                allWords.add(new ArrayList(words));
                words.clear();
            } else {
                singleCommandWords.add(word.image);
            }
        }
    ) +

    <EOF>

    {
        if (singleCommandWords.size() > 0) {
            return new SingleCommand(singleCommandWords,
                output != null ? output.image : null,
                input != null ? input.image : null) ;
        } else if (isPipe) {
            allWords.add(words);
            return new PipeCommand(allWords);
        } else {
            return null;
        }
    }
}


Command Goal2():
{
    Token t;
    Token r = null;
    boolean isPipe = false;
    boolean isAndAnd = false;
    List<String> singleCommandWords = new ArrayList<String>();
    List<String> words = new ArrayList<String>();
    List<List<String>> allWords = new ArrayList<List<String>>();
}
{
    (
        (t = <WORD>
            {
                System.out.println("ADDING 1 " + t.image);
                singleCommandWords.add(t.image);
                words.add(t.image);
            })+
            {
                System.out.println("ALLWORDS 1: " + words);
                allWords.add(new ArrayList(words));
                words.clear();
            }

        ( <GT> r = <WORD> { singleCommandWords.add(">"); singleCommandWords.add(r.image); } )*

        ( (<PIPE> { isPipe = true; } | <ANDAND> { isAndAnd = true; }) ((t = <WORD>
            {
               System.out.println("ADDING 2 " + t.image);
               words.add(t.image);
            }
            )+
            )
             {
                System.out.println("ALLWORDS 2: " + words);
                allWords.add(new ArrayList(words));
                words.clear();
             }
              )*
    )
     <EOF>
     {
        System.out.println("Returning command " + words + " " + allWords);
        if (isPipe) return new PipeCommand(allWords);
        else if (isAndAnd) return new AndAndCommand(allWords);
        else return new SingleCommand(singleCommandWords, null, null);
     }
}
